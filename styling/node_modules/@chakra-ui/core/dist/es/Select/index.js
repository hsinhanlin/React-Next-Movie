import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/** @jsx jsx */
import { jsx } from "@emotion/core";
import Icon from "../Icon";
import { forwardRef } from "react";
import Input from "../Input";
import { useColorMode } from "../ColorModeProvider";
import Box from "../Box";
var Select = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      size = _ref.size,
      placeholder = _ref.placeholder,
      form = _ref.form,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onKeyDown = _ref.onKeyDown,
      onKeyUp = _ref.onKeyUp,
      onKeyPress = _ref.onKeyPress,
      onFocus = _ref.onFocus,
      autoFocus = _ref.autoFocus,
      isDisabled = _ref.isDisabled,
      isInvalid = _ref.isInvalid,
      isRequired = _ref.isRequired,
      name = _ref.name,
      id = _ref.id,
      isReadOnly = _ref.isReadOnly,
      focusBorderColor = _ref.focusBorderColor,
      variant = _ref.variant,
      ariaLabel = _ref["aria-label"],
      ariaDescribedby = _ref["aria-describedby"],
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      selectProps = _ref.selectProps,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "size", "placeholder", "form", "onChange", "onBlur", "onKeyDown", "onKeyUp", "onKeyPress", "onFocus", "autoFocus", "isDisabled", "isInvalid", "isRequired", "name", "id", "isReadOnly", "focusBorderColor", "variant", "aria-label", "aria-describedby", "value", "defaultValue", "selectProps"]);

  var _useColorMode = useColorMode(),
      colorMode = _useColorMode.colorMode;

  var themedColor = colorMode === "dark" ? "whiteAlpha.800" : "inherit";
  var opacity = isReadOnly || isDisabled ? 0.5 : null;
  return jsx(Box, _extends({
    position: "relative",
    width: "100%",
    color: themedColor
  }, rest), jsx(Input, _extends({
    as: "select",
    size: size,
    appearance: "none",
    ref: ref,
    pr: "2rem",
    pb: "px",
    lineHeight: "normal"
  }, {
    form: form,
    placeholder: placeholder,
    onChange: onChange,
    onBlur: onBlur,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onKeyPress: onKeyPress,
    onFocus: onFocus,
    autoFocus: autoFocus,
    isDisabled: isDisabled,
    isInvalid: isInvalid,
    isRequired: isRequired,
    value: value,
    defaultValue: defaultValue,
    name: name,
    id: id,
    isReadOnly: isReadOnly,
    focusBorderColor: focusBorderColor,
    variant: variant,
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby
  }, selectProps), placeholder && jsx("option", {
    value: ""
  }, placeholder), children), jsx(Box, {
    position: "absolute",
    display: "inline-flex",
    width: "1.5rem",
    height: "100%",
    alignItems: "center",
    justifyContent: "center",
    right: "0.5rem",
    top: "50%",
    pointerEvents: "none",
    opacity: opacity,
    zIndex: 2,
    transform: "translateY(-50%)"
  }, jsx(Icon, {
    name: "chevron-down",
    color: "currentColor",
    size: "20px"
  })));
});
Select.displayName = "Select";
export default Select;